package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
)

func pkgConfig(sb *strings.Builder) {
	sb.WriteString("// #cgo pkg-config: python3-embed\n")
}

func pycfgCommand(pycfg string, file *strings.Builder) {
	subCmd := &strings.Builder{}
	subCmd.WriteString("//#cgo LDFLAGS: ")
	c := exec.Command(pycfg, "--embed", "--ldflags")
	c.Stdout = subCmd
	if err := c.Run(); err != nil {
		log.Printf("%s command returned an error %v; using pkg-config", pycfg, err)
		pkgConfig(file)
		return
	}

	subCmd.WriteString("//#cgo CFLAGS: ")
	c = exec.Command(pycfg, "--includes")
	c.Stdout = subCmd
	if err := c.Run(); err != nil {
		log.Printf("%s command returned an error %v; using pkg-config", pycfg, err)
		pkgConfig(file)
		return
	}

	file.WriteString(subCmd.String())
}

func main() {
	output := flag.String("o", "", "output filename (required)")
	pycfg := flag.String("pycfg", "", "python3-config executable name/path")
	cflags := flag.String("cflags", "", "manually specify CFLAGS")
	ldflags := flag.String("ldflags", "", "manually specify LDFLAGS")
	flag.Parse()

	if *output == "" {
		flag.Usage()
		os.Exit(1)
	}

	file := &strings.Builder{}
	file.WriteString("// This file is auto-generated by scripts/flags.go; DO NOT EDIT\n")
	file.WriteString("package python\n\n")

	if *cflags != "" && *ldflags != "" {
		log.Print("Both: clfags and ldflags specified manually - using them")
		file.WriteString(fmt.Sprintf(`
//#cgo CFLAGS: %s
//#cgo LDFLAGS: %s
`, *cflags, *ldflags))
	} else if *pycfg != "" {
		log.Printf("specified python3-config command %s", *pycfg)
		pycfgCommand(*pycfg, file)
	} else {
		log.Print("python3-command not specified (using pkg-config)")
		pkgConfig(file)
	}

	file.WriteString("import \"C\"\n")

	os.WriteFile(*output, []byte(file.String()), 0o644)
}
